//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Action Inputs/PlayerActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionsMap"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""70a40475-199e-4435-8a66-aa1ff6c90671"",
            ""actions"": [
                {
                    ""name"": ""Walking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff73515b-24e0-4d7e-8590-eb7f1756c6a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ff94e378-bd2c-46cb-8a23-c1b980c2e635"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""adf7df85-d4b7-4582-8f70-d8777ca3d684"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f781aa8-5535-4dd8-9927-5c4ebc0f4c1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a35fc342-e91a-4a13-9ec2-de38f3bb70a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9c02137-2e3b-409f-8bc8-5385505b6215"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""b03ca9ca-7d62-46c1-8c39-93e67b65ea7d"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""15f57d85-ea95-4dc0-9de1-4173f8e84a65"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fb6f2dcb-cb87-466c-be57-b9802549fc49"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c8ee946-bb0f-465f-b01a-785d974069e2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b1b2992-5fef-41d9-b88b-08fbf5f0120f"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Interactables"",
            ""id"": ""1437f5ac-7ea8-4bab-95f7-2ea69b70f12c"",
            ""actions"": [
                {
                    ""name"": ""Main Interactable Key"",
                    ""type"": ""Button"",
                    ""id"": ""ff5162dc-81f8-408f-9035-f9dc69033b89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Interactable Key"",
                    ""type"": ""Button"",
                    ""id"": ""39ff6223-8dfb-4c9d-aa70-bd245bce8350"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit Key"",
                    ""type"": ""Button"",
                    ""id"": ""df672a2b-31b3-4f35-9a06-b1726bc4a174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a1683ff-fbdc-4b32-9359-c3052ab52fdb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Main Interactable Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""309f34ef-1884-43ff-85d9-b3321de2ba3f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Main Interactable Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d53bc3f-2156-4347-af69-fd510a7126a4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Interactable Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60913588-d951-469e-90f5-22e2edd822de"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Interactable Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a93bdbb-bb2a-4714-9792-9e45a027d5a4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0702517-a882-40ad-8c40-667b31aadec0"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Walking = m_Movement.FindAction("Walking", throwIfNotFound: true);
        // Interactables
        m_Interactables = asset.FindActionMap("Interactables", throwIfNotFound: true);
        m_Interactables_MainInteractableKey = m_Interactables.FindAction("Main Interactable Key", throwIfNotFound: true);
        m_Interactables_SecondaryInteractableKey = m_Interactables.FindAction("Secondary Interactable Key", throwIfNotFound: true);
        m_Interactables_ExitKey = m_Interactables.FindAction("Exit Key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Walking;
    public struct MovementActions
    {
        private @PlayerActionsMap m_Wrapper;
        public MovementActions(@PlayerActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walking => m_Wrapper.m_Movement_Walking;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Walking.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
                @Walking.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
                @Walking.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnWalking;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walking.started += instance.OnWalking;
                @Walking.performed += instance.OnWalking;
                @Walking.canceled += instance.OnWalking;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Interactables
    private readonly InputActionMap m_Interactables;
    private IInteractablesActions m_InteractablesActionsCallbackInterface;
    private readonly InputAction m_Interactables_MainInteractableKey;
    private readonly InputAction m_Interactables_SecondaryInteractableKey;
    private readonly InputAction m_Interactables_ExitKey;
    public struct InteractablesActions
    {
        private @PlayerActionsMap m_Wrapper;
        public InteractablesActions(@PlayerActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MainInteractableKey => m_Wrapper.m_Interactables_MainInteractableKey;
        public InputAction @SecondaryInteractableKey => m_Wrapper.m_Interactables_SecondaryInteractableKey;
        public InputAction @ExitKey => m_Wrapper.m_Interactables_ExitKey;
        public InputActionMap Get() { return m_Wrapper.m_Interactables; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractablesActions set) { return set.Get(); }
        public void SetCallbacks(IInteractablesActions instance)
        {
            if (m_Wrapper.m_InteractablesActionsCallbackInterface != null)
            {
                @MainInteractableKey.started -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnMainInteractableKey;
                @MainInteractableKey.performed -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnMainInteractableKey;
                @MainInteractableKey.canceled -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnMainInteractableKey;
                @SecondaryInteractableKey.started -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnSecondaryInteractableKey;
                @SecondaryInteractableKey.performed -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnSecondaryInteractableKey;
                @SecondaryInteractableKey.canceled -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnSecondaryInteractableKey;
                @ExitKey.started -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnExitKey;
                @ExitKey.performed -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnExitKey;
                @ExitKey.canceled -= m_Wrapper.m_InteractablesActionsCallbackInterface.OnExitKey;
            }
            m_Wrapper.m_InteractablesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MainInteractableKey.started += instance.OnMainInteractableKey;
                @MainInteractableKey.performed += instance.OnMainInteractableKey;
                @MainInteractableKey.canceled += instance.OnMainInteractableKey;
                @SecondaryInteractableKey.started += instance.OnSecondaryInteractableKey;
                @SecondaryInteractableKey.performed += instance.OnSecondaryInteractableKey;
                @SecondaryInteractableKey.canceled += instance.OnSecondaryInteractableKey;
                @ExitKey.started += instance.OnExitKey;
                @ExitKey.performed += instance.OnExitKey;
                @ExitKey.canceled += instance.OnExitKey;
            }
        }
    }
    public InteractablesActions @Interactables => new InteractablesActions(this);
    public interface IMovementActions
    {
        void OnWalking(InputAction.CallbackContext context);
    }
    public interface IInteractablesActions
    {
        void OnMainInteractableKey(InputAction.CallbackContext context);
        void OnSecondaryInteractableKey(InputAction.CallbackContext context);
        void OnExitKey(InputAction.CallbackContext context);
    }
}
