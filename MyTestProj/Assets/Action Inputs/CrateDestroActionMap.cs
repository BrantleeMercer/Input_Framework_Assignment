//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Action Inputs/CrateDestroActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CrateDestroActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CrateDestroActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CrateDestroActionMap"",
    ""maps"": [
        {
            ""name"": ""Crate"",
            ""id"": ""0ad9129d-6d18-4afd-8845-6049af1c3d20"",
            ""actions"": [
                {
                    ""name"": ""Destro"",
                    ""type"": ""Button"",
                    ""id"": ""47532fff-971c-4aca-97fb-7ae68e30f356"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bd6cad1-0a20-4df4-993a-62461db51093"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efbe9124-04fe-4068-aea9-ddad9760ef20"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crate
        m_Crate = asset.FindActionMap("Crate", throwIfNotFound: true);
        m_Crate_Destro = m_Crate.FindAction("Destro", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crate
    private readonly InputActionMap m_Crate;
    private ICrateActions m_CrateActionsCallbackInterface;
    private readonly InputAction m_Crate_Destro;
    public struct CrateActions
    {
        private @CrateDestroActionMap m_Wrapper;
        public CrateActions(@CrateDestroActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Destro => m_Wrapper.m_Crate_Destro;
        public InputActionMap Get() { return m_Wrapper.m_Crate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrateActions set) { return set.Get(); }
        public void SetCallbacks(ICrateActions instance)
        {
            if (m_Wrapper.m_CrateActionsCallbackInterface != null)
            {
                @Destro.started -= m_Wrapper.m_CrateActionsCallbackInterface.OnDestro;
                @Destro.performed -= m_Wrapper.m_CrateActionsCallbackInterface.OnDestro;
                @Destro.canceled -= m_Wrapper.m_CrateActionsCallbackInterface.OnDestro;
            }
            m_Wrapper.m_CrateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Destro.started += instance.OnDestro;
                @Destro.performed += instance.OnDestro;
                @Destro.canceled += instance.OnDestro;
            }
        }
    }
    public CrateActions @Crate => new CrateActions(this);
    public interface ICrateActions
    {
        void OnDestro(InputAction.CallbackContext context);
    }
}
